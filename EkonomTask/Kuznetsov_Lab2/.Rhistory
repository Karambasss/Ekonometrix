install.packages("MASS")
library(MASS)
install.packages("lmtest")
library(lmtest)
install.packages("forecast")
library(forecast)
install.packages("tseries")
library(tseries)
install.packages("orcutt")
library(orcutt)
install.packages("sandwich")
library(sandwich)
install.packages("psych")
library(psych)
install.packages("regclass")
library(regclass)
install.packages("mctest")
library(mctest)
install.packages("urca")
library(urca)
install.packages("tseries")
install.packages("urca")
install.packages("tseries")
# Получение данных
data <- read.table('data.txt', sep = '\t', dec = ',', header = TRUE, encoding = 'UTF-8')
# Получение данных
setwd('C:/Users/mpapa/Documents/EkonomTask/Kuznetsov_Lab2/')
data <- read.table('data.txt', sep = '\t', dec = ',', header = TRUE, encoding = 'UTF-8')
data
gdp <- data$GDP
t <- data$t
d1 <- data$d1
d2 <- data$d2
d3 <- data$d3
t <- data$t
t
d1 <- data$d1
d1
d2 <- data$d2
d2
d3 <- data$d3
d3
head(data, 5)
pm <- lm(gdp ~ t + d1 + d2 + d3)
pm
cor(data)
pm <- lm(gdp ~ t + d1 + d2 + d3)
pm
spm = summary(pm)
spm
# Тесты на значимость модели
summary(pm)
(sum(abs(pm$residuals / gdp)) / length(gdp)) * 100
# Тесты на значимость модели
spm = summary(pm)
spm
(sum(abs(pm$residuals / gdp)) / length(gdp)) * 100
# Построение прогноза
future <- data.frame(
t = c(41, 42, 43),
d1 = c(1, 0, 0),
d2 = c(0, 1, 0),
d3 = c(0, 0, 1)
)
predict(pm, newdata = future)
future
dataOb = data[1:39,] #Обучающая выборка
dataOb
cor(dataOb)
dataKontr = data[40:40,] #контролирующая выборка
dataKontr
cor(dataKontr)
dataKontr = data[40:40,] #контролирующая выборка
dataKontr
data
gdp <- dataOb$GDP
gdp
t <- dataOb$t
t <- dataOb$t
t
d1 <- dataOb$d1
d1
d2 <- dataOb$d2
d2
d3 <- dataOb$d3
d3
pm <- lm(gdp ~ t + d1 + d2 + d3)
pm
# Диаграмма рассеяния
plot(t, gdp, col = 'red')
# Доверительный интервал
confint(pm, level = 0.95)
# Тесты на значимость модели
spm = summary(pm)
spm
gdp <- dataOb$GDP
gdp
t <- dataOb$t
t
d1 <- dataOb$d1
d1
d2 <- dataOb$d2
d2
d3 <- dataOb$d3
d3
pm <- lm(gdp ~ t + d1 + d2 + d3)
pm
# Диаграмма рассеяния
plot(t, gdp, col = 'red')
# Доверительный интервал
confint(pm, level = 0.95)
# Тесты на значимость модели
spm = summary(pm)
spm
# Тесты на значимость модели
spm = summary(pm)
spm
determ <- pm$r.squared
determ
adjust_determ <- pm$adj.r.squared
adjust_determ
st_error <- sqrt(deviance(pm)/df.residual(pm))
st_error
# Тесты на значимость модели
spm = summary(pm)
spm
determ <- spm$r.squared
determ
adjust_determ <- spm$adj.r.squared
adjust_determ
st_error <- sqrt(deviance(spm)/df.residual(spm))
st_error
st_error <- sqrt(deviance(pm)/df.residual(pm))
st_error
st_error <- sqrt(deviance(pm)/df.residual(pm))
st_error
approx <- sum(abs(spm$residuals/gdp)) / length(gdp) * 100
approx
f_test <- spm$fstatistic[1]
f_test
compare <- data.frame(
Коэффициент_детерминации=determ,
Скорректированный_коэффициент=adjust_determ,
Стандартная_ошибка_модели=st_error,
Ошибка_аппроксимации=approx,
F_тест=f_test
)
print(compare)
spm
#2 пункт:Проверьте выполнение предпосылки МНК об отсутствии автокорреляции.
# При обнаружении автокорреляции предложите подход к ее устранению
# Тесты на автокорреляцию
# Дарбина Уотсона
dwtest(pm)
# Бреуша-Годфри
bgtest(pm, order = 1, order.by = NULL, type = c("Chisq", "F"))
bgtest(pm, order = 2, order.by = NULL, type = c("Chisq", "F"))
bgtest(pm, order = 3, order.by = NULL, type = c("Chisq", "F"))
bgtest(pm, order = 4, order.by = NULL, type = c("Chisq", "F"))
#2 пункт:Проверьте выполнение предпосылки МНК об отсутствии автокорреляции.
# При обнаружении автокорреляции предложите подход к ее устранению
# Тесты на автокорреляцию
# Дарбина Уотсона
# H0: нет автокорреляции
# Ha: есть автокорреляция 1-го порядка
dw = dwtest(pm) # Тест Дарбина-Ватсона
dw
#p-val < 0.05 - отвергаем гипотезу об отсутствии автокорреляции, принимаем гипотезу о существовании автокоррелции
# Бреуша-Годфри
bg = bgtest(pm,order = 1)
bg
#p-val < 0.05 - отвергаем гипотезу об отсутствии автокорреляции, принимаем гипотезу о существовании автокоррелции
# Бреуша-Годфри
# H0: нет автокорреляции
# Ha: есть автокорреляция n порядка
bg = bgtest(pm,order = 1)
bg
#Устраняем автокорреляцию
p1 = 1-(dw$statistic/2)
p1
#Устраняем автокорреляцию
p1 = 1-(dw$statistic/2)
p1
gdp1<-gdp[2:39]-p1*gdp[1:38]
gdp1
t1 <- t[2:39]-p1*t[1:38]
t1
d11 <- d1[2:39]-p1*d1[1:38]
d11
d22 <- d2[2:39]-p1*d2[1:38]
d22
d33 <- d3[2:39]-p1*d3[1:38]
d33
pm1 = lm(gdp1~t1+d11+d22+d33)
pm1
spm1 = summary(pm1)
spm1
b <-pm1$coefficients[2]
b
a <-pm1$coefficients[1]/(1-p1)
a
# Дарбина Уотсона
# H0: нет автокорреляции
# Ha: есть автокорреляция 1-го порядка
dw = dwtest(pm1) # Тест Дарбина-Ватсона
dw
# Бреуша-Годфри
# H0: нет автокорреляции
# Ha: есть автокорреляция n порядка
bg = bgtest(pm1,order = 1)
bg
# Бреуша-Годфри
# H0: нет автокорреляции
# Ha: есть автокорреляция n порядка
bg = bgtest(pm1,order = 1)
bg
bgtest(pm1, order = 1, order.by = NULL, type = c("Chisq", "F"))
bgtest(pm1, order = 2, order.by = NULL, type = c("Chisq", "F"))
bgtest(pm1, order = 3, order.by = NULL, type = c("Chisq", "F"))
bgtest(pm1, order = 4, order.by = NULL, type = c("Chisq", "F"))
# Бреуша-Годфри
# H0: нет автокорреляции
# Ha: есть автокорреляция n порядка
bg = bgtest(pm1,order = 1)
bg
# ACF и PACF
gdp_t <- ts(data=gdp, start = 2009, name="GDP", frequency = 4)
tsdisplay(gdp_t)
ACF <- Acf(gdp_t) # выборочная автокорреляция
ACF
PACF <- Pacf(gdp_t) # частная автокорреляиця
PACF
# Построение прогноза
future <- data.frame(
t = c(41, 42, 43),
d1 = c(1, 0, 0),
d2 = c(0, 1, 0),
d3 = c(0, 0, 1)
)
# Построение прогноза
future <- data.frame(
t = c(40, 41),
d1 = c(1, 0),
d2 = c(0, 1),
d3 = c(0, 0)
)
future
predict(pm1, newdata = future)
# Построение прогноза
future <- data.frame(
t1 = c(40, 41),
d11 = c(1, 0),
d22 = c(0, 1),
d33 = c(0, 0)
)
future
predict(pm1, newdata = future)
predict(pm1, newdata=future, interval="prediction")
predict(pm1, newdata=future, interval="confidence")
predict(pm1, newdata = future)
predict(pm1, newdata=future, interval="prediction")
predict(pm1, newdata=future, interval="confidence")
predictGDP = predict(pm1, newdata = future)
predictGDP
# Построение прогноза
future <- data.frame(
t1 = c(40, 41),
d11 = c(1, 0),
d22 = c(0, 1),
d33 = c(0, 0)
)
future
#точечное прогнозирование
predictGDP = predict(pm1, newdata = future)
predictGDP
#интервальное прогнозирование
predict(pm1, newdata=future, interval="prediction")
predict(pm1, newdata=future, interval="confidence")
future
spm1 = summary(pm1)
spm1
#интервальное прогнозирование
predict(pm1, newdata=predictGDP, interval="prediction")
#интервальное прогнозирование
predict(pm1, newdata=future, interval="prediction")
predict(pm1, newdata=future, interval="confidence")
#точечное прогнозирование
predictGDP = predict(pm1, newdata = future)
predictGDP
#точечное прогнозирование
predictGDP = predict(pm1, newdata = future)
predictGDP
