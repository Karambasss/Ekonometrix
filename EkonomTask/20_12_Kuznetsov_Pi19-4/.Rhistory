library(lmtest)
install.packages("lmtest")
install.packages("lmtest")
library(lmtest)
install.packages("forecast")
library(forecast)
install.packages("tseries")
library(tseries)
setwd("C:/Users/mpapa/Documents/EkonomTask/30_10_Kuznetsov/")
install.packages("tseries")
data <- read.table("dannie.txt", dec = ',', fileEncoding = 'utf-8', header = TRUE)
data
y=data$GDP
y
x1=data$t
x1
x2=data$df1
x2
x3=data$df2
x3
x4=data$df3
x4
# Корреляционная матрица
cor(data)
#Строим графики
plot(y, col = 'red')
plot(y, x1, col="orange")
# Множественная модель
pm <- lm(y~x1+x2+x3+x4)
pm
spm <- summary(pm)
spm
confint(pm, level = 0.95) # Доверительные интервалы
A2 <- sum(abs(spm$residuals/y)) / length(y) * 100 # Апроксимация
A2
error_many <- sqrt(deviance(pm)/df.residual(pm)) #Ст ошибка
error_many
determ <- spm$r.squared
adjust_determ <- spm$adj.r.squared
st_error <- error_many
approx <- A2
f_test <- spm$fstatistic[1]
compare <- data.frame(
Коэффициент_детерминации=determ,
Скорректированный_коэффициент=adjust_determ,
Стандартная_ошибка_модели=st_error,
Ошибка_аппроксимации=approx,
F_тест=f_test
)
print(compare)
#прогнозирование по модели с фиктивными переменными
pred<-data.frame(c(41,42,43),c(1,0,0),c(0,1,0),c(0,0,1)) # Строим прогноз на новый 2019 год
pred
colnames(pred)<-c("x1","x2","x3","x4")
pred
predictGDP<-predict(pm,newdata = pred)
predictGDP
setwd("/Users/mpapa/Downloads/")
data <- read.table("dataKuznetsov.txt", dec = ',', fileEncoding = 'utf-8', header = TRUE)
data
y=data$GDP
y
x1=data$t
x1
x2=data$df1
x2
x3=data$df2
x3
x4=data$df3
x4
# Корреляционная матрица
cor(data)
plot(y, col = 'red')
plot(y, x1, col="orange")
# Множественная модель
pm <- lm(y~x1+x2+x3+x4)
pm
spm <- summary(pm)
spm
confint(pm, level = 0.95) # Доверительные интервалы
A2 <- sum(abs(spm$residuals/y)) / length(y) * 100 # Апроксимация
A2
#прогнозирование по модели с фиктивными переменными
pred<-data.frame(c(41,42,43),c(1,0,0),c(0,1,0),c(0,0,1)) # Строим прогноз на новый 2019 год
pred
colnames(pred)<-c("x1","x2","x3","x4")
pred
predictGDP<-predict(pm,newdata = pred)
predictGDP
install.packages("MASS")
library(MASS)
install.packages("lmtest")
library(lmtest)
install.packages("forecast")
library(forecast)
install.packages("tseries")
library(tseries)
install.packages("orcutt")
library(orcutt)
install.packages("sandwich")
library(sandwich)
install.packages("psych")
library(psych)
install.packages("regclass")
library(regclass)
install.packages("mctest")
library(mctest)
install.packages("urca")
library(urca)
install.packages("tseries")
install.packages("urca")
install.packages("tseries")
setwd('C:/Users/mpapa/Documents/EkonomTask/20_12_Kuznetsov_Pi19-4/')
data <- read.table('data.txt', sep = ' ', dec = ',', header = TRUE, encoding = 'UTF-8')
head(data, 5)
lag <- data.frame(
y = data$y[3:length(data$y)],
x0 = data$x[3:length(data$y)],
x1 = data$x[2:(length(data$y) - 1)],
x2 = data$x[1:(length(data$y) - 2)]
)
train <- lag[1:(length(lag$y) - 1),]
test <- lag[(length(lag$y)):length(lag$y),]
m <- lm(y ~ x0 + x1 + x2, data = train)
summary(m)
gqtest(m, fraction = 0.3)
bptest(m)
dwtest(m)
bgtest(m, type = "F")
b <- coef(m)
b[2] * 0 + b[3] * 1 + b[4] * 2 # Средний лаг
b[2] # Краткосрочный мультипликатор
sum(b[2:length(b)]) # Долгосрочный мультипликатор
waldtest(lm(y ~ x0, data=train), m)
# Точечный прогноз
predict(m, newdata = test)
# Интервальный прогноз
predict(m, newdata = test, interval = "confidence")
predict(m, newdata = test, interval = "prediction")
lag
head(data, 5)
head(data, 15)
data
lag <- data.frame(
y = data$y[3:length(data$y)],
x0 = data$x[3:length(data$y)],
x1 = data$x[2:(length(data$y) - 1)],
x2 = data$x[1:(length(data$y) - 2)]
)
lag
train <- lag[1:(length(lag$y) - 1),]
train
test <- lag[(length(lag$y)):length(lag$y),]
test
cor(data)
cor(data)
m
summary(m)
gqtest(m, fraction = 0.3)
bptest(m)
dwtest(m)
bgtest(m, type = "F")
b
b[2] * 0 + b[3] * 1 + b[4] * 2 # Средний лаг
b[2] # Краткосрочный мультипликатор
sum(b[2:length(b)]) # Долгосрочный мультипликатор
waldtest(lm(y ~ x0, data=train), m)
# Точечный прогноз
predict(m, newdata = test)
# Интервальный прогноз
predict(m, newdata = test, interval = "confidence")
predict(m, newdata = test, interval = "prediction")
spm = summary(m)
spm
determ <- spm$r.squared
determ
adjust_determ <- spm$adj.r.squared
adjust_determ
st_error <- sqrt(deviance(pm)/df.residual(pm))
st_error <- sqrt(deviance(m)/df.residual(m))
st_error
spm = summary(m)
spm
determ <- spm$r.squared
determ
adjust_determ <- spm$adj.r.squared
adjust_determ
st_error <- sqrt(deviance(m)/df.residual(m))
st_error
approx <- sum(abs(spm$residuals/data$y)) / length(data$y) * 100
approx
f_test <- spm$fstatistic[1]
f_test
compare <- data.frame(
Коэффициент_детерминации=determ,
Скорректированный_коэффициент=adjust_determ,
Стандартная_ошибка_модели=st_error,
Ошибка_аппроксимации=approx,
F_тест=f_test
)
print(compare)
